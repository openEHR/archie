package com.nedap.archie.json.flat;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.nedap.archie.aom.OperationalTemplate;
import com.nedap.archie.base.OpenEHRBase;
import com.nedap.archie.creation.ExampleJsonInstanceGenerator;
import com.nedap.archie.rminfo.MetaModel;
import com.nedap.archie.rminfo.MetaModelProvider;
import com.nedap.archie.rminfo.MetaModels;

import java.util.Map;

public class FlatJsonExampleInstanceGenerator {

    /**
     * Generate a flat JSON example instance for the given OperationalTemplate.
     *
     * @param template the template for which to generate the example
     * @param metaModels the metamodels to use. Must contain an actual RM ModelInfoLookup and a JSON Object Mapper
     * @param language the language to generate the example in
     * @param jsonFormatConfiguration the configuratin of the flat format
     * @return a flat json as generated by the FlatJsonGenerator, to be serialized with an objectmapper
     * @throws JsonProcessingException in case the ExampleJsonInstanceGenerator generates json that the objectmapper cannot process
     * @throws DuplicateKeyException in case the FlatJsonGenerator generates incorrect data for this OperationalTemplate
     * @deprecated Use {@link #generateExample(OperationalTemplate, MetaModelProvider, String, FlatJsonFormatConfiguration)} instead.
     */
    @Deprecated
    public Map<String, Object> generateExample(OperationalTemplate template, MetaModels metaModels, String language, FlatJsonFormatConfiguration jsonFormatConfiguration) throws JsonProcessingException, DuplicateKeyException {
        return generateExample(template, (MetaModelProvider) metaModels, language, jsonFormatConfiguration);
    }

    /**
     * Generate a flat JSON example instance for the given OperationalTemplate.
     *
     * @param template the template for which to generate the example
     * @param metaModelProvider the metamodels to use. Must contain an actual RM ModelInfoLookup and a JSON Object Mapper
     * @param language the language to generate the example in
     * @param jsonFormatConfiguration the configuratin of the flat format
     * @return a flat json as generated by the FlatJsonGenerator, to be serialized with an objectmapper
     * @throws JsonProcessingException in case the ExampleJsonInstanceGenerator generates json that the objectmapper cannot process
     * @throws DuplicateKeyException in case the FlatJsonGenerator generates incorrect data for this OperationalTemplate
     */
    public Map<String, Object> generateExample(OperationalTemplate template, MetaModelProvider metaModelProvider, String language, FlatJsonFormatConfiguration jsonFormatConfiguration) throws JsonProcessingException, DuplicateKeyException {
        MetaModel metaModel = metaModelProvider.selectAndGetMetaModel(template);
        if(metaModel.getModelInfoLookup() == null) {
            throw new IllegalArgumentException("Cannot find ModelInfoLookup for archetype");
        }
        if(metaModel.getJsonObjectMapper() == null) {
            throw new IllegalArgumentException("Cannot find JSON Object mapper in selected metamodel");
        }
        ExampleJsonInstanceGenerator exampleJsonInstanceGenerator = new ExampleJsonInstanceGenerator(metaModelProvider, language);
        exampleJsonInstanceGenerator.setTypePropertyName("_type");
        Map<String, Object> generatedExample = exampleJsonInstanceGenerator.generate(template);
        ObjectMapper objectMapper = metaModel.getJsonObjectMapper();
        String jsonRmObject = objectMapper.writeValueAsString(generatedExample);
        OpenEHRBase openEHRBase = objectMapper.readValue(jsonRmObject, OpenEHRBase.class);

        return new FlatJsonGenerator(metaModel.getModelInfoLookup(), jsonFormatConfiguration).buildPathsAndValues(openEHRBase, template, "en");

    }


}
