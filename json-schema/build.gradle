description = "tools that operate on the archie reference models and archetype object model"

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.nedap.healthcare.archie:archie-all:0.19.0'
    }
}

import com.nedap.archie.json.JSONSchemaCreator;
import com.nedap.archie.json.JsonSchemaUriProvider;
import com.nedap.archie.json.JsonSchemaUri;
import org.openehr.referencemodels.BuiltinReferenceModels;
import javax.json.*;
import javax.json.stream.JsonGenerator;
import org.openehr.bmm.core.BmmClass;

class CustomUriProvider implements JsonSchemaUriProvider {

    private String baseUri;
    public CustomUriProvider(String baseUri) {
        this.baseUri = baseUri;
    }

    public JsonSchemaUri provideJsonSchemaUrl(BmmClass bmmClass) {
        return new JsonSchemaUri(baseUri, bmmClass.getPackagePath() + ".json");
    }
}

abstract class JsonSchemaCreationTask extends DefaultTask {

    private final FileSystemOperations fileSystemOperations

    @OutputDirectory
    abstract DirectoryProperty getOutputDir();

    @TaskAction
    def generateSchema() {
        generate("singlefile", false)
        generate("multifile", true)
    }

    def generate(String dirName, boolean multifile) {
        def rm110 = BuiltinReferenceModels.getBmmRepository().getModel("openehr_rm_1.1.0").getModel();
        def rm104 = BuiltinReferenceModels.getBmmRepository().getModel("openehr_rm_1.0.4").getModel();
        def rm103 = BuiltinReferenceModels.getBmmRepository().getModel("openehr_rm_1.0.3").getModel();

        def schemas110 = new JSONSchemaCreator()
                .withBaseUri("https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.1.0/")
                .splitInMultipleFiles(multifile).create(rm110);
        def schemas104 = new JSONSchemaCreator()
                .withBaseUri("https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.4/")
                .splitInMultipleFiles(multifile).create(rm104);
        def schemas103 = new JSONSchemaCreator()
                .withBaseUri("https://specifications.openehr.org/releases/ITS-JSON/latest/components/RM/Release-1.0.3/")
                .splitInMultipleFiles(multifile).create(rm103);
        def config = new HashMap<>();
        config.put(JsonGenerator.PRETTY_PRINTING, true);
        def jsonWriterFactory = Json.createWriterFactory(config);

        printSchemas("RM-1.1.0", dirName, schemas110, jsonWriterFactory);
        printSchemas("RM-1.0.4", dirName, schemas104, jsonWriterFactory);
        printSchemas("RM-1.0.3", dirName, schemas103, jsonWriterFactory);

    }

    def printSchemas(String version, String outputDir, Map<JsonSchemaUri, JsonObject> schemas, JsonWriterFactory jsonWriterFactory) {
        for(JsonSchemaUri name:schemas.keySet()) {
            def schema = schemas.get(name);
            def versionDir = getOutputDir().get().dir(version)
            if(!versionDir.getAsFile().exists()) {
                versionDir.getAsFile().mkdir();
            }
         //   def directory = versionDir.dir(outputDir)
          //  if(!directory.getAsFile().exists()) {
           //     directory.getAsFile().mkdir();
           // }
            versionDir.file(name.getFilename()).getAsFile().withWriter { writer ->
                jsonWriterFactory.createWriter(writer).write(schema);
            }
        }
    }
}

// Create a task using the task type
tasks.register('generateJsonSchema', JsonSchemaCreationTask) {
    outputDir = file(layout.buildDirectory.dir('schemaOutput'))
}


